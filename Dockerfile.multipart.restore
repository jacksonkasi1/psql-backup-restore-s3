# Use an official Node.js runtime as the base image
FROM node:16.16.0

# Set the working directory in the container to /app
WORKDIR /app

# Copy the application's source code to the working directory
COPY . .

# Install the application's dependencies inside the Docker image
RUN npm install

# Add the PostgreSQL repository and install client tools
RUN apt-get update && \
    apt-get install -y curl gpg gnupg2 software-properties-common apt-transport-https lsb-release ca-certificates && \
    curl -fsSL https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor -o /etc/apt/trusted.gpg.d/postgresql.gpg && \
    echo "deb http://apt.postgresql.org/pub/repos/apt `lsb_release -cs`-pgdg main" > /etc/apt/sources.list.d/pgdg.list && \
    apt-get update && \
    apt-get install -y postgresql-client-16 postgresql-16

# Install TimescaleDB extension
RUN apt-get update && \
    apt-get install -y apt-transport-https && \
    curl -sSL https://packagecloud.io/timescale/timescaledb/gpgkey | apt-key add - && \
    echo "deb https://packagecloud.io/timescale/timescaledb/debian/ buster main" | tee /etc/apt/sources.list.d/timescaledb.list && \
    apt-get update && \
    apt-get install -y timescaledb-2-postgresql-16

# Make port 80 available outside of the container for the application to use
EXPOSE 80

# Define the Docker image's behavior at runtime
CMD ["npm", "start"]
